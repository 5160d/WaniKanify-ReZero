#!/usr/bin/env node
/**
 * Generates TypeScript union of Chrome extension message keys from locales/en/messages.json.
 * Usage:
 *  node scripts/generate-message-keys.cjs          # writes file
 *  node scripts/generate-message-keys.cjs --check  # exits non-zero if file out of date
 */
const fs = require('fs')
const path = require('path')

const ROOT = path.join(__dirname, '..')
const LOCALE_FILE = path.join(ROOT, 'locales', 'en', 'messages.json')
const OUTPUT_FILE = path.join(ROOT, 'src', 'locales', 'message-keys.d.ts')

function loadMessages() {
  const raw = fs.readFileSync(LOCALE_FILE, 'utf8')
  return JSON.parse(raw)
}

function buildFile(keys) {
  const header = `// AUTO-GENERATED by scripts/generate-message-keys.cjs\n// DO NOT EDIT MANUALLY. Run: npm run i18n:gen\n\n`
  const union = keys.map(k => `  | "${k}"`).join('\n')
  const body = `export type MessageKey =\n${union};\n\nexport interface ITFunction {\n  (key: MessageKey, substitutions?: Record<string, string | number | undefined | null>): string\n}\n`
  return header + body
}

function main() {
  const args = process.argv.slice(2)
  const checkOnly = args.includes('--check')

  const messages = loadMessages()
  const keys = Object.keys(messages).sort((a, b) => a.localeCompare(b))
  // Filter out any meta keys (none currently) or description-only nodes
  const content = buildFile(keys)

  if (checkOnly) {
    if (!fs.existsSync(OUTPUT_FILE)) {
      console.error('message-keys.d.ts missing')
      process.exit(1)
    }
    const existing = fs.readFileSync(OUTPUT_FILE, 'utf8')
    if (existing !== content) {
      console.error('message-keys.d.ts is out of date. Run npm run i18n:gen')
      process.exit(2)
    }
    process.exit(0)
  } else {
    fs.writeFileSync(OUTPUT_FILE, content)
    console.log(`Generated ${OUTPUT_FILE} with ${keys.length} keys.`)
  }
}

main()
